import { buffer } from 'micro';
import Stripe from 'stripe';
import { connectToDatabase } from './db.js';
import Order from '../models/Order.js';
import { sendOrderDetailsMail } from '../services/send-order-details/send-order-details-mail.js';

const stripe = new Stripe(process.env.STRIPE_SECRET, {
  apiVersion: '2022-11-15',
});

// –û—Ç–∫–ª—é—á–∞–µ–º bodyParser (–∏–Ω–∞—á–µ raw —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø–æ–ª—É—á–∏–º)
export const config = {
  api: {
    bodyParser: false,
  },
};

export default async function handler(req, res) {
  console.log('üîî Webhook endpoint hit:', req.method);

  if (req.method !== 'POST') {
    console.log('‚ùå Not a POST request');
    return res.status(405).send('Method Not Allowed');
  }

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
  await connectToDatabase();
  console.log('‚úÖ Connected to DB');

  let event;

  try {
    const rawBody = await buffer(req);
    const sig = req.headers['stripe-signature'];

    console.log('üîí Verifying Stripe signature...');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å Stripe
    event = stripe.webhooks.constructEvent(
      rawBody,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET
    );
    console.log('‚úÖ Stripe signature verified');
  } catch (err) {
    console.error('‚ö†Ô∏è Error verifying Stripe webhook signature:', err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–µ "checkout.session.completed"
  if (event.type === 'checkout.session.completed') {
    console.log('üí∞ Checkout session completed');

    const session = event.data.object;

    const orderId = session.metadata?.orderId;
    if (!orderId) {
      console.error('üö´ No order ID in metadata');
      return res.status(400).send('Missing order ID');
    }

    try {
      const order = await Order.findById(orderId);
      if (!order) {
        console.error('‚ùå Order not found in database');
        return res.status(404).send('Order not found');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
      order.status = 'paid';
      order.paymentIntentId = session.payment_intent;
      await order.save();

      console.log(`Order ${order._id} marked as PAID`);

      await sendOrderDetailsMail(order);

      return res.status(200).json({ received: true });
    } catch (err) {
      console.error('Error updating order status:', err);
      return res.status(500).send('Internal server error');
    }
  }

  console.log('‚ÑπÔ∏è Event not handled:', event.type);
  // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–∏—ë–º
  res.status(200).json({ received: true });
}
